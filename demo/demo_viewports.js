(()=>{"use strict";var __webpack_modules__={230:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// NAMESPACE OBJECT: ./esm/index.js\nvar esm_namespaceObject = {};\n__webpack_require__.r(esm_namespaceObject);\n__webpack_require__.d(esm_namespaceObject, {\n  "q": () => (DragWatcher)\n});\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/DragWatcher.js\n\n\n/**\n * 1.カンバス全体がドラッグされている状態を確認する\n * 2.マウスホイールが操作されている状態を確認する\n * この二つを実行するためのクラスです。\n */\nclass DragWatcher extends three_module/* EventDispatcher */.pBf {\n  constructor(canvas, option) {\n    var _a, _b;\n    super();\n    this.isDrag = false;\n    this.hasThrottled = false;\n    this.throttlingTime_ms = 16;\n    this.throttlingDelta = 0;\n    this.onTick = e => {\n      this.throttlingDelta += e.delta;\n      if (this.throttlingDelta < this.throttlingTime_ms) return;\n      this.hasThrottled = false;\n      this.throttlingDelta %= this.throttlingTime_ms;\n    };\n    this.onDocumentMouseDown = event => {\n      if (this.isDrag) return;\n      if (!this.isContain(event)) return;\n      this.isDrag = true;\n      this.updatePosition(event);\n      this.dispatchDragEvent("drag_start", event);\n    };\n    this.onDocumentMouseMove = event => {\n      if (this.hasThrottled) return;\n      this.hasThrottled = true;\n      this.dispatchDragEvent("move", event);\n      if (!this.isDrag) return;\n      this.dispatchDragEvent("drag", event);\n      this.updatePosition(event);\n    };\n    this.onDocumentMouseLeave = event => {\n      this.onDocumentMouseUp(event);\n    };\n    this.onDocumentMouseUp = event => {\n      if (!this.isDrag) return;\n      this.isDrag = false;\n      this.dispatchDragEvent("drag_end", event);\n    };\n    this.onMouseWheel = e => {\n      const evt = {\n        type: "zoom"\n      };\n      if (e.detail != null) {\n        evt.deltaScroll = e.detail < 0 ? 1 : -1;\n      }\n      if (e.wheelDelta != null) {\n        evt.deltaScroll = e.wheelDelta > 0 ? 1 : -1;\n      }\n      if (e.deltaY != null) {\n        evt.deltaScroll = e.deltaY > 0 ? 1 : -1;\n      }\n      this.dispatchEvent(evt);\n    };\n    (_a = this.throttlingTime_ms) !== null && _a !== void 0 ? _a : this.throttlingTime_ms = option === null || option === void 0 ? void 0 : option.throttlingTime_ms;\n    (_b = this.viewport) !== null && _b !== void 0 ? _b : this.viewport = option === null || option === void 0 ? void 0 : option.viewport;\n    this.canvas = canvas;\n    this.canvas.addEventListener("mousemove", this.onDocumentMouseMove, false);\n    this.canvas.addEventListener("mousedown", this.onDocumentMouseDown, false);\n    this.canvas.addEventListener("mouseup", this.onDocumentMouseUp, false);\n    this.canvas.addEventListener("mouseleave", this.onDocumentMouseLeave, false);\n    this.canvas.addEventListener("wheel", this.onMouseWheel, false);\n    esm/* RAFTicker.on */.F.on("tick", this.onTick);\n  }\n  updatePosition(event) {\n    this.positionX = event.offsetX;\n    this.positionY = event.offsetY;\n  }\n  dispatchDragEvent(type, event) {\n    const evt = {\n      type\n    };\n    const {\n      x,\n      y\n    } = this.convertToLocalMousePoint(event);\n    evt.positionX = x;\n    evt.positionY = y;\n    if (type === "drag") {\n      evt.deltaX = event.offsetX - this.positionX;\n      evt.deltaY = event.offsetY - this.positionY;\n    }\n    this.dispatchEvent(evt);\n  }\n  convertToLocalMousePoint(e) {\n    if (!this.viewport) {\n      return {\n        x: e.offsetX,\n        y: e.offsetY\n      };\n    } else {\n      const rect = DragWatcher.convertToRect(this.canvas, this.viewport);\n      return {\n        x: e.offsetX - rect.x1,\n        y: e.offsetY - rect.y1\n      };\n    }\n  }\n  /**\n   * マウスポインタがviewport内に収まっているか否か\n   * @param event\n   * @private\n   */\n  isContain(event) {\n    if (!this.viewport) return true;\n    const rect = DragWatcher.convertToRect(this.canvas, this.viewport);\n    return event.offsetX >= rect.x1 && event.offsetX <= rect.x2 && event.offsetY >= rect.y1 && event.offsetY <= rect.y2;\n  }\n  static convertToRect(canvas, viewport) {\n    let height = 0;\n    if (canvas.style.width != null && canvas.style.height) {\n      height = parseInt(canvas.style.height);\n    } else {\n      height = canvas.height / window.devicePixelRatio;\n    }\n    return {\n      x1: viewport.x,\n      x2: viewport.x + viewport.width,\n      y1: height - (viewport.y + viewport.height),\n      y2: height - viewport.y\n    };\n  }\n  dispose() {\n    this.canvas.removeEventListener("mousemove", this.onDocumentMouseMove, false);\n    this.canvas.removeEventListener("mousedown", this.onDocumentMouseDown, false);\n    this.canvas.removeEventListener("mouseup", this.onDocumentMouseUp, false);\n    this.canvas.removeEventListener("mouseleave", this.onDocumentMouseLeave, false);\n    esm/* RAFTicker.off */.F.off("tick", this.onTick);\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_viewports.js\n\n\n\nconst W = 1280;\nconst H = 640;\nconst onDomContentsLoaded = () => {\n  const canvas = document.getElementById("webgl-canvas");\n  const renderOption = {\n    canvas\n  };\n  const renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.autoClear = false;\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  const box = new three_module/* Mesh */.Kj0(new three_module/* TorusKnotGeometry */.FE5(10, 3, 100, 16), new three_module/* MeshPhongMaterial */.xoR({\n    color: 0xff0000,\n    specular: 0xffffff,\n    shininess: 30\n  }));\n  const tri = new three_module/* Mesh */.Kj0(new three_module/* TorusKnotGeometry */.FE5(10, 3, 100, 16), new three_module/* MeshPhongMaterial */.xoR({\n    color: 0x0000ff,\n    specular: 0xffffff,\n    shininess: 30\n  }));\n  const scene1 = new SceneSet(renderer, 20, 20, 400, 300, box, 0x222222);\n  const scene2 = new SceneSet(renderer, 480, 360, 120, 60, tri, 0x444444);\n  const render = () => {\n    renderer.setClearColor(0x000000);\n    renderer.clear();\n    scene1.render(renderer);\n    scene2.render(renderer);\n    requestAnimationFrame(render);\n  };\n  render();\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nwindow.onload = onDomContentsLoaded;\nclass SceneSet {\n  scene;\n  camera;\n  bgColor;\n  viewPort;\n  mesh;\n  dragManager;\n  constructor(renderer, x, y, width, height, mesh, bgColor) {\n    this.viewPort = new three_module/* Vector4 */.Ltg(x, y, width, height);\n    this.mesh = mesh;\n    this.scene = new three_module/* Scene */.xsS();\n    this.camera = new three_module/* PerspectiveCamera */.cPb(45, width / height, 1, 10000);\n    this.camera.position.set(0, 0, 64);\n    this.scene.add(this.camera);\n    this.scene.add(mesh);\n    this.bgColor = bgColor;\n\n    //光源オブジェクト(light)の設定\n    const ambientLight = new three_module/* AmbientLight */.Mig(0x111111, 1);\n    this.scene.add(ambientLight);\n    const spot = new three_module/* SpotLight */.PMe(0x888888, 1);\n    spot.position.set(8, 6, -2);\n    this.scene.add(spot);\n    const spot2 = new three_module/* SpotLight */.PMe(0x888888, 1);\n    spot2.position.set(-8, -6, 2);\n    this.scene.add(spot2);\n    this.dragManager = new DragWatcher(renderer.domElement, {\n      viewport: this.viewPort\n    });\n    this.dragManager.addEventListener(esm_namespaceObject.DragEventType.DRAG, e => {\n      console.log(this.bgColor, `throttlingTime_ms : ${this.dragManager.throttlingTime_ms}`, `TimeStamp : ${performance.now()}`, e);\n    });\n    this.dragManager.addEventListener(esm_namespaceObject.DragEventType.DRAG_START, e => {\n      console.log(e);\n    });\n    this.dragManager.addEventListener(esm_namespaceObject.DragEventType.DRAG_END, e => {\n      console.log(e);\n    });\n    this.dragManager.addEventListener(esm_namespaceObject.DragEventType.ZOOM, e => {\n      console.log(e);\n    });\n  }\n  render(renderer) {\n    this.mesh.rotation.x += 0.001;\n    this.mesh.rotation.y += 0.001;\n    renderer.setClearColor(this.bgColor);\n    renderer.clearDepth(); // important!\n    renderer.setScissorTest(true);\n    renderer.setScissor(this.viewPort);\n    renderer.setViewport(this.viewPort);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setScissorTest(false);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///230\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(g=0;g<deferred.length;g++){for(var[U,F,B]=deferred[g],I=!0,e=0;e<U.length;e++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[e])))?U.splice(e--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(g--,1);var C=F();void 0!==C&&(Q=C)}}return Q}B=B||0;for(var g=deferred.length;g>0&&deferred[g-1][2]>B;g--)deferred[g]=deferred[g-1];deferred[g]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.j=212,(()=>{var Q={212:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,e,C]=F,g=0;if(I.some((U=>0!==Q[U]))){for(B in e)__webpack_require__.o(e,B)&&(__webpack_require__.m[B]=e[B]);if(C)var n=C(__webpack_require__)}for(U&&U(F);g<I.length;g++)s=I[g],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(n)},F=self.webpackChunk_masatomakino_threejs_drag_watcher=self.webpackChunk_masatomakino_threejs_drag_watcher||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(230)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();